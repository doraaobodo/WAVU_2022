# this is a statement. We are assigning a "string" or text to a variable called
# String. A variable stores an item (a string, a number, etc) in memory as an "object"
# for later use. We create objects using the '='.
myString = "Hello, World!" # to run this code, place cursor on the line and press enter
myString
# Let's write more code
num = 1 # this is a
mode(num)
numVector = c(1, 2, 3, 4, 'tjhree') # a vector is a
mode(numVector)
cars
# this is a matrix
builtInCars = cars
builtInCars
mode(builtInCars)
mode(cars)
mtcars
mode(mtcars)
str(cars)
# this is a data frame. It's a table of vectors all of the same lenghth
# However ypu can also have different modes (e.g. numerics and characters together)
builtInCars = mtcars
mode(builtInCars)
plot(cars)
# Open RStudio, click on the “Console” pane,
# type 1+1 and press enter.
# R displays the result of the calculation.
# In this document, we will show such an interaction with R as below
1 + 1
# * has higher precedence than +.
# We can use brackets if necessary ( ). Try
1+2*3 # and
(1+2)*3
knitr::opts_chunk$set(fig.width=6, fig.height=3.5, fig.align="center")
myvec[3:4]
######### Vectors ##########
# Let's create some more complicated but common objects
# a vector is a collection of items(e.g numbers, words, etc) with the same mode.
# We can make vectors with c( ), for example c(1,2,3).
# c means “combine”. R is obsesssed with vectors,
# in R even single numbers are vectors of length one.
# Many things that can be done with a single number can also be done with a vector.
# For example arithmetic can be done on vectors as it can be on single numbers.
myvec <- c(10,20,30,40,50)
myvec[3:4]
items
myvec[3:5]
# Try
x = 1:10
######### Functions ########
# Functions are the things that do all the work for us in R:
# calculate, manipulate data, read and write to files, produce plots.
# R has many built in functions and we will also be loading more
# specialized functions from “packages”.
# We’ve already seen several functions: c( ), length( ), and plot( ).
# Let’s now have a look at sum( ). You can ask for help about a function with "?"
?sum()
# Some functions take more than one argument.
# Let’s look at the function rep, which means “repeat”,
# and which can take a variety of different arguments.
# In the simplest case, it takes a value and the number
# of times to repeat that value.
?rep()
rep(x = 42, times = 10)
rep(x = c(1,2,3), times = 10)
knitr::opts_chunk$set(fig.width=6, fig.height=3.5, fig.align="center")
geo <- read_csv("r-intro-2-files/geo.csv")
knitr::opts_chunk$set(fig.width=6, fig.height=3.5, fig.align="center")
install.packages(c("tidyverse","dplyr","readr","tidyr","ggplot2"))
library(tidyverse)
# OR
library(dplyr)
library(readr)
library(tidyr)
library(ggplot2)
geo <- read_csv("r-intro-2-files/geo.csv")
geo
mtc = mtcars
mtc
summarize(gap2010, mean_life_exp=weighted.mean(life_exp, population, na.rm=TRUE))
knitr::opts_chunk$set(fig.width=6, fig.height=3.5, fig.align="center")
library(tidyverse)
geo <- read_csv("r-intro-2-files/geo.csv")
gap <- read_csv("r-intro-2-files/gap-minder.csv")
gap_geo <- left_join(gap, geo, by="name")
gap2010 <- filter(gap_geo, year == 2010)
sum(gap2010$population)
mean(gap2010$life_exp)
mean(gap2010$life_exp, na.rm=TRUE)
is.na( c(1,2,NA,3) )
cleaned <- filter(gap2010, !is.na(life_exp))
summarize(gap2010, mean_life_exp=weighted.mean(life_exp, population, na.rm=TRUE))
summarize(
group_by(gap_geo, year),
mean_life_exp=weighted.mean(life_exp, population, na.rm=TRUE))
